#pragma once

#include <vector>
#include <Windows.h>
#include <winternl.h>
#include "ntnames.h"
#include "ntobj.h"

typedef enum OBJECT_TYPE {
	DIRECTORY_OBJECT,
	SYMBOLICLINK_OBJECT,
	MUTANT_OBJECT,
	SECTION_OBJECT,
	EVENT_OBJECT,
	SEMAPHORE_OBJECT,
	TIMER_OBJECT,
	KEY_OBJECT,
	EVENTPAIR_OBJECT,
	IOCOMPLETION_OBJECT,
	FILE_OBJECT
};

// INIT FUNCTION

int InitNtModule();
int OpenDirectoryObject(NTSTATUS& ntStatus, OBJECT_ATTRIBUTES& oa, UNICODE_STRING& objname, HANDLE& hDeviceDir, PCWSTR path);
int ProcessDirectoryObjects(NTSTATUS& ntStatus, HANDLE& hDeviceDir, BYTE* buf, std::vector<OBJECT_DIRECTORY_INFORMATION>& entries);
NTSTATUS ProcessSymbolicLinkObject(HANDLE& handle, UNICODE_STRING& link);
NTSTATUS NtOpenObject(OBJECT_TYPE type, HANDLE& handle, OBJECT_ATTRIBUTES& openStruct, ACCESS_MASK access, LPCWSTR path);
int GetObjectType(PCWSTR objectTypeStr, OBJECT_TYPE& result);

//NTSTATUS(NTAPI* NtQueryObject)(HANDLE, OBJECT_INFORMATION_CLASS, PVOID, ULONG, PULONG);

// NT FUNCTIONS DOCS: http://undocumented.ntinternals.net/index.html
static NTSTATUS(NTAPI* NtQueryDirectoryObject)(HANDLE, PVOID, ULONG, BOOLEAN, BOOLEAN, PULONG, PULONG);
static NTSTATUS(NTAPI* NtQuerySymbolicLinkObject)(HANDLE, PUNICODE_STRING, PULONG);
static NTSTATUS(NTAPI* NtQueryMutant)(HANDLE, MUTANT_INFORMATION_CLASS, PVOID, ULONG, PULONG);
static NTSTATUS(NTAPI* NtQuerySection)(HANDLE, SECTION_INFORMATION_CLASS, PVOID, ULONG, PULONG);
static NTSTATUS(NTAPI* NtQueryEvent)(HANDLE, EVENT_INFORMATION_CLASS, PVOID, ULONG, PULONG);
static NTSTATUS(NTAPI* NtQuerySemaphore)(HANDLE, SEMAPHORE_INFORMATION_CLASS, PVOID, ULONG, PULONG);
static NTSTATUS(NTAPI* NtQueryTimer)(HANDLE, TIMER_INFORMATION_CLASS, PVOID, ULONG, PULONG);


static NTSTATUS(NTAPI* NtOpenDirectoryObject)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);
static NTSTATUS(NTAPI* NtOpenSymbolicLinkObject)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);
static NTSTATUS(NTAPI* NtOpenMutant)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);
static NTSTATUS(NTAPI* NtOpenSection)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);
static NTSTATUS(NTAPI* NtOpenEvent)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);
static NTSTATUS(NTAPI* NtOpenSemaphore)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);
static NTSTATUS(NTAPI* NtOpenTimer)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);
static NTSTATUS(NTAPI* NtOpenKey)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);
static NTSTATUS(NTAPI* NtOpenEventPair)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);
static NTSTATUS(NTAPI* NtOpenIoCompletion)(PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES);

static VOID(NTAPI* RtlInitUnicodeString_)(PUNICODE_STRING, PCWSTR);
static NTSTATUS(NTAPI* NtClose_)(HANDLE);
